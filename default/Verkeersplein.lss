
Verkeersplein.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  0000077e  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000267  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce8  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  0000174d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055a  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055e  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000374  00000000  00000000  00002932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  c6:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_>:
        free(hulp->next);
        staart = hulp;
    }
}

template <typename T> bool List<T>::komtAlVoor(T in){
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
  d8:	8b 01       	movw	r16, r22
// Kijkt of de waarde al in de lijst voorkomt
    for (hulp = kop; hulp != 0; hulp = hulp->next)
  da:	88 81       	ld	r24, Y
  dc:	99 81       	ldd	r25, Y+1	; 0x01
  de:	0b c0       	rjmp	.+22     	; 0xf6 <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_+0x28>
    {
        if (hulp->data == in)
  e0:	b8 01       	movw	r22, r16
  e2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN15VoetgangerLichteqERS_>
  e6:	88 23       	and	r24, r24
  e8:	11 f0       	breq	.+4      	; 0xee <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_+0x20>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0b c0       	rjmp	.+22     	; 0x104 <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_+0x36>
    }
}

template <typename T> bool List<T>::komtAlVoor(T in){
// Kijkt of de waarde al in de lijst voorkomt
    for (hulp = kop; hulp != 0; hulp = hulp->next)
  ee:	ec 81       	ldd	r30, Y+4	; 0x04
  f0:	fd 81       	ldd	r31, Y+5	; 0x05
  f2:	85 81       	ldd	r24, Z+5	; 0x05
  f4:	96 81       	ldd	r25, Z+6	; 0x06
  f6:	9d 83       	std	Y+5, r25	; 0x05
  f8:	8c 83       	std	Y+4, r24	; 0x04
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	79 f7       	brne	.-34     	; 0xe0 <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_+0x12>
 102:	80 e0       	ldi	r24, 0x00	; 0
    {
        if (hulp->data == in)
            return true;
    }
    return false;
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <_ZN4ListI15VoetgangerLichtE9push_backES0_>:
            kop->data = in;
        }
    }
}

template <typename T> void List<T>::push_back(T in){
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	00 d0       	rcall	.+0      	; 0x11c <_ZN4ListI15VoetgangerLichtE9push_backES0_+0xe>
 11c:	00 d0       	rcall	.+0      	; 0x11e <_ZN4ListI15VoetgangerLichtE9push_backES0_+0x10>
 11e:	0f 92       	push	r0
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	8c 01       	movw	r16, r24
 126:	7b 01       	movw	r14, r22
    if (kop == 0) //Maakt een element aan waar de kop en staart naar wijzen als de lijst leeg is
 128:	dc 01       	movw	r26, r24
 12a:	8d 91       	ld	r24, X+
 12c:	9c 91       	ld	r25, X
 12e:	89 2b       	or	r24, r25
 130:	91 f4       	brne	.+36     	; 0x156 <_ZN4ListI15VoetgangerLichtE9push_backES0_+0x48>
    {
        kop = staart = (struct lijst*) malloc(sizeof(lijst));
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 65 02 	call	0x4ca	; 0x4ca <malloc>
 13a:	fc 01       	movw	r30, r24
 13c:	d8 01       	movw	r26, r16
 13e:	13 96       	adiw	r26, 0x03	; 3
 140:	9c 93       	st	X, r25
 142:	8e 93       	st	-X, r24
 144:	12 97       	sbiw	r26, 0x02	; 2
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	9c 93       	st	X, r25
 14a:	8e 93       	st	-X, r24
        kop->next = 0;
 14c:	16 82       	std	Z+6, r1	; 0x06
 14e:	15 82       	std	Z+5, r1	; 0x05
        kop->data = in;
 150:	ed 91       	ld	r30, X+
 152:	fc 91       	ld	r31, X
 154:	2c c0       	rjmp	.+88     	; 0x1ae <_ZN4ListI15VoetgangerLichtE9push_backES0_+0xa0>

#ifndef VOETGANGERLICHT
#define VOETGANGERLICHT

class VoetgangerLicht
{
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	fb 01       	movw	r30, r22
 160:	82 81       	ldd	r24, Z+2	; 0x02
 162:	8b 83       	std	Y+3, r24	; 0x03
 164:	83 81       	ldd	r24, Z+3	; 0x03
 166:	8c 83       	std	Y+4, r24	; 0x04
 168:	84 81       	ldd	r24, Z+4	; 0x04
 16a:	8d 83       	std	Y+5, r24	; 0x05
    }
    else //Maakt een element aan aan het einde van de lijst als er al wat in de lijst staat en het element nog niet voorkomt
    {
        if (!komtAlVoor(in))
 16c:	c8 01       	movw	r24, r16
 16e:	be 01       	movw	r22, r28
 170:	6f 5f       	subi	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	0e 94 67 00 	call	0xce	; 0xce <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_>
 178:	88 23       	and	r24, r24
 17a:	29 f5       	brne	.+74     	; 0x1c6 <_ZN4ListI15VoetgangerLichtE9push_backES0_+0xb8>
        {
            hulp = (struct lijst*) malloc(sizeof(lijst));
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 65 02 	call	0x4ca	; 0x4ca <malloc>
 184:	d8 01       	movw	r26, r16
 186:	14 96       	adiw	r26, 0x04	; 4
 188:	8c 93       	st	X, r24
 18a:	14 97       	sbiw	r26, 0x04	; 4
 18c:	15 96       	adiw	r26, 0x05	; 5
 18e:	9c 93       	st	X, r25
 190:	15 97       	sbiw	r26, 0x05	; 5
            staart->next = hulp;
 192:	12 96       	adiw	r26, 0x02	; 2
 194:	ed 91       	ld	r30, X+
 196:	fc 91       	ld	r31, X
 198:	13 97       	sbiw	r26, 0x03	; 3
 19a:	85 83       	std	Z+5, r24	; 0x05
 19c:	96 83       	std	Z+6, r25	; 0x06
            staart = hulp;
 19e:	14 96       	adiw	r26, 0x04	; 4
 1a0:	ed 91       	ld	r30, X+
 1a2:	fc 91       	ld	r31, X
 1a4:	15 97       	sbiw	r26, 0x05	; 5
 1a6:	13 96       	adiw	r26, 0x03	; 3
 1a8:	fc 93       	st	X, r31
 1aa:	ee 93       	st	-X, r30
 1ac:	12 97       	sbiw	r26, 0x02	; 2
 1ae:	d7 01       	movw	r26, r14
 1b0:	12 96       	adiw	r26, 0x02	; 2
 1b2:	8c 91       	ld	r24, X
 1b4:	12 97       	sbiw	r26, 0x02	; 2
 1b6:	82 83       	std	Z+2, r24	; 0x02
 1b8:	13 96       	adiw	r26, 0x03	; 3
 1ba:	8c 91       	ld	r24, X
 1bc:	13 97       	sbiw	r26, 0x03	; 3
 1be:	83 83       	std	Z+3, r24	; 0x03
 1c0:	14 96       	adiw	r26, 0x04	; 4
 1c2:	8c 91       	ld	r24, X
 1c4:	84 83       	std	Z+4, r24	; 0x04
            staart->data = in;
        }
    }
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	cf 91       	pop	r28
 1d2:	df 91       	pop	r29
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <main>:
#define ADRESPORTA 0x1B
#define ADRESPORTB 0x18
#define ADRESPORTC 0x15
#define ADRESPORTD 0x12

int main()
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	c1 54       	subi	r28, 0x41	; 65
 1f4:	d0 40       	sbci	r29, 0x00	; 0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
{
	//Stel onderstaande poorten in op Output en laad allemaal enen in
	DDRA=0xFF;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 204:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 206:	84 bb       	out	0x14, r24	; 20
	PORTA=0xFF;
 208:	8b bb       	out	0x1b, r24	; 27
	PORTB=0xFF;
 20a:	88 bb       	out	0x18, r24	; 24
	PORTC=0xFF;
 20c:	85 bb       	out	0x15, r24	; 21

	// Aanmaken van de verschillende autolichtobjecten
	AutoLicht azl(0xFE, 0xFD, 0xFB, ADRESPORTB);
 20e:	ce 01       	movw	r24, r28
 210:	84 96       	adiw	r24, 0x24	; 36
 212:	6e ef       	ldi	r22, 0xFE	; 254
 214:	4d ef       	ldi	r20, 0xFD	; 253
 216:	2b ef       	ldi	r18, 0xFB	; 251
 218:	08 e1       	ldi	r16, 0x18	; 24
 21a:	0e 94 39 02 	call	0x472	; 0x472 <_ZN9AutoLichtC1Ehhhh>
	AutoLicht azr(0xF7, 0xEF, 0xDF, ADRESPORTB);
 21e:	ce 01       	movw	r24, r28
 220:	8a 96       	adiw	r24, 0x2a	; 42
 222:	67 ef       	ldi	r22, 0xF7	; 247
 224:	4f ee       	ldi	r20, 0xEF	; 239
 226:	2f ed       	ldi	r18, 0xDF	; 223
 228:	0e 94 39 02 	call	0x472	; 0x472 <_ZN9AutoLichtC1Ehhhh>
	AutoLicht ahl(0xFE, 0xFD, 0xFB, ADRESPORTC);
 22c:	20 e3       	ldi	r18, 0x30	; 48
 22e:	c2 2e       	mov	r12, r18
 230:	d1 2c       	mov	r13, r1
 232:	cc 0e       	add	r12, r28
 234:	dd 1e       	adc	r13, r29
 236:	c6 01       	movw	r24, r12
 238:	6e ef       	ldi	r22, 0xFE	; 254
 23a:	4d ef       	ldi	r20, 0xFD	; 253
 23c:	2b ef       	ldi	r18, 0xFB	; 251
 23e:	05 e1       	ldi	r16, 0x15	; 21
 240:	0e 94 39 02 	call	0x472	; 0x472 <_ZN9AutoLichtC1Ehhhh>
	AutoLicht ahr(0xF7, 0xEF, 0xDF, ADRESPORTC);
 244:	ce 01       	movw	r24, r28
 246:	c6 96       	adiw	r24, 0x36	; 54
 248:	67 ef       	ldi	r22, 0xF7	; 247
 24a:	4f ee       	ldi	r20, 0xEF	; 239
 24c:	2f ed       	ldi	r18, 0xDF	; 223
 24e:	0e 94 39 02 	call	0x472	; 0x472 <_ZN9AutoLichtC1Ehhhh>

	// Aanmaken van de verschillende voetgangerlichtobjecten
	VoetgangerLicht vhr(0xFE, 0xFD, ADRESPORTA);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	6e ef       	ldi	r22, 0xFE	; 254
 258:	4d ef       	ldi	r20, 0xFD	; 253
 25a:	2b e1       	ldi	r18, 0x1B	; 27
 25c:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN15VoetgangerLichtC1Ehhh>
	VoetgangerLicht vz(0xBF, 0x7F, ADRESPORTB);
 260:	ce 01       	movw	r24, r28
 262:	06 96       	adiw	r24, 0x06	; 6
 264:	6f eb       	ldi	r22, 0xBF	; 191
 266:	4f e7       	ldi	r20, 0x7F	; 127
 268:	28 e1       	ldi	r18, 0x18	; 24
 26a:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN15VoetgangerLichtC1Ehhh>
	VoetgangerLicht vhl(0xBF, 0x7F, ADRESPORTC);
 26e:	ce 01       	movw	r24, r28
 270:	0b 96       	adiw	r24, 0x0b	; 11
 272:	6f eb       	ldi	r22, 0xBF	; 191
 274:	4f e7       	ldi	r20, 0x7F	; 127
 276:	25 e1       	ldi	r18, 0x15	; 21
 278:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN15VoetgangerLichtC1Ehhh>

	//test
	ahl.lichtNaarGroen(); 
 27c:	c6 01       	movw	r24, r12
 27e:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN15VoetgangerLicht14lichtNaarGroenEv>
	ahl.lichtNaarRood();
 282:	c6 01       	movw	r24, r12
 284:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN15VoetgangerLicht13lichtNaarRoodEv>
	ahl.lichtNaarOranje();
 288:	c6 01       	movw	r24, r12
 28a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9AutoLicht15lichtNaarOranjeEv>
	ahl.alleLichtenUit();
 28e:	c6 01       	movw	r24, r12
 290:	0e 94 29 02 	call	0x452	; 0x452 <_ZN9AutoLicht14alleLichtenUitEv>
#include "list.h"
#include <stdlib.h>

template <typename T> List<T>::List(){
    kop = NULL;
 294:	1d ae       	std	Y+61, r1	; 0x3d
 296:	1c ae       	std	Y+60, r1	; 0x3c
    staart = NULL;
 298:	1f ae       	std	Y+63, r1	; 0x3f
 29a:	1e ae       	std	Y+62, r1	; 0x3e
 29c:	94 e0       	ldi	r25, 0x04	; 4
 29e:	e9 2e       	mov	r14, r25
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	f9 2e       	mov	r15, r25
 2a4:	f9 8a       	std	Y+17, r15	; 0x11
 2a6:	e8 8a       	std	Y+16, r14	; 0x10
 2a8:	8e a1       	ldd	r24, Y+38	; 0x26
 2aa:	8a 8b       	std	Y+18, r24	; 0x12
 2ac:	8f a1       	ldd	r24, Y+39	; 0x27
 2ae:	8b 8b       	std	Y+19, r24	; 0x13
 2b0:	88 a5       	ldd	r24, Y+40	; 0x28
 2b2:	8c 8b       	std	Y+20, r24	; 0x14

	//Rien test ;)
	//eerste lijst met lichten
	List<VoetgangerLicht> l1;
	l1.push_back(azl);
 2b4:	8e 01       	movw	r16, r28
 2b6:	04 5c       	subi	r16, 0xC4	; 196
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	c8 01       	movw	r24, r16
 2bc:	be 01       	movw	r22, r28
 2be:	60 5f       	subi	r22, 0xF0	; 240
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN4ListI15VoetgangerLichtE9push_backES0_>
 2c6:	fe 8a       	std	Y+22, r15	; 0x16
 2c8:	ed 8a       	std	Y+21, r14	; 0x15
 2ca:	8c a5       	ldd	r24, Y+44	; 0x2c
 2cc:	8f 8b       	std	Y+23, r24	; 0x17
 2ce:	8d a5       	ldd	r24, Y+45	; 0x2d
 2d0:	88 8f       	std	Y+24, r24	; 0x18
 2d2:	8e a5       	ldd	r24, Y+46	; 0x2e
 2d4:	89 8f       	std	Y+25, r24	; 0x19
	if(l1.komtAlVoor(azr))
 2d6:	c8 01       	movw	r24, r16
 2d8:	be 01       	movw	r22, r28
 2da:	6b 5e       	subi	r22, 0xEB	; 235
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	0e 94 67 00 	call	0xce	; 0xce <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_>
 2e2:	88 23       	and	r24, r24
 2e4:	19 f0       	breq	.+6      	; 0x2ec <main+0x10e>
		ahl.lichtNaarRood();
 2e6:	c6 01       	movw	r24, r12
 2e8:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN15VoetgangerLicht13lichtNaarRoodEv>
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	e8 2e       	mov	r14, r24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	f8 2e       	mov	r15, r24
 2f4:	fb 8e       	std	Y+27, r15	; 0x1b
 2f6:	ea 8e       	std	Y+26, r14	; 0x1a
 2f8:	8c a5       	ldd	r24, Y+44	; 0x2c
 2fa:	8c 8f       	std	Y+28, r24	; 0x1c
 2fc:	8d a5       	ldd	r24, Y+45	; 0x2d
 2fe:	8d 8f       	std	Y+29, r24	; 0x1d
 300:	8e a5       	ldd	r24, Y+46	; 0x2e
 302:	8e 8f       	std	Y+30, r24	; 0x1e
	l1.push_back(azr);
 304:	8e 01       	movw	r16, r28
 306:	04 5c       	subi	r16, 0xC4	; 196
 308:	1f 4f       	sbci	r17, 0xFF	; 255
 30a:	c8 01       	movw	r24, r16
 30c:	be 01       	movw	r22, r28
 30e:	66 5e       	subi	r22, 0xE6	; 230
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN4ListI15VoetgangerLichtE9push_backES0_>
 316:	f8 a2       	std	Y+32, r15	; 0x20
 318:	ef 8e       	std	Y+31, r14	; 0x1f
 31a:	8c a5       	ldd	r24, Y+44	; 0x2c
 31c:	89 a3       	std	Y+33, r24	; 0x21
 31e:	8d a5       	ldd	r24, Y+45	; 0x2d
 320:	8a a3       	std	Y+34, r24	; 0x22
 322:	8e a5       	ldd	r24, Y+46	; 0x2e
 324:	8b a3       	std	Y+35, r24	; 0x23
	if(l1.komtAlVoor(azr))
 326:	c8 01       	movw	r24, r16
 328:	be 01       	movw	r22, r28
 32a:	61 5e       	subi	r22, 0xE1	; 225
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	0e 94 67 00 	call	0xce	; 0xce <_ZN4ListI15VoetgangerLichtE10komtAlVoorES0_>
 332:	88 23       	and	r24, r24
 334:	21 f0       	breq	.+8      	; 0x33e <main+0x160>
		ahl.lichtNaarGroen();
 336:	ce 01       	movw	r24, r28
 338:	c0 96       	adiw	r24, 0x30	; 48
 33a:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN15VoetgangerLicht14lichtNaarGroenEv>


	List<int> a;

	while(1) {
		PINE = PINE;
 33e:	81 b1       	in	r24, 0x01	; 1
 340:	81 b9       	out	0x01, r24	; 1
 342:	fd cf       	rjmp	.-6      	; 0x33e <main+0x160>

00000344 <_ZN15VoetgangerLichtC2Ehhh>:
#include "voetgangerlicht.h"

VoetgangerLicht::VoetgangerLicht(uint8_t rood, uint8_t groen, uint8_t poort):rood(rood), groen(groen), poort(poort) {	
 344:	fc 01       	movw	r30, r24
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	91 83       	std	Z+1, r25	; 0x01
 34c:	80 83       	st	Z, r24
 34e:	22 83       	std	Z+2, r18	; 0x02
 350:	63 83       	std	Z+3, r22	; 0x03
 352:	44 83       	std	Z+4, r20	; 0x04
}
 354:	08 95       	ret

00000356 <_ZN15VoetgangerLichtC1Ehhh>:
#include "voetgangerlicht.h"

VoetgangerLicht::VoetgangerLicht(uint8_t rood, uint8_t groen, uint8_t poort):rood(rood), groen(groen), poort(poort) {	
 356:	fc 01       	movw	r30, r24
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	91 83       	std	Z+1, r25	; 0x01
 35e:	80 83       	st	Z, r24
 360:	22 83       	std	Z+2, r18	; 0x02
 362:	63 83       	std	Z+3, r22	; 0x03
 364:	44 83       	std	Z+4, r20	; 0x04
}
 366:	08 95       	ret

00000368 <_ZN15VoetgangerLicht13lichtNaarRoodEv>:

void VoetgangerLicht::lichtNaarRood() {
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 36e:	dc 01       	movw	r26, r24
 370:	ed 91       	ld	r30, X+
 372:	fc 91       	ld	r31, X
 374:	01 90       	ld	r0, Z+
 376:	f0 81       	ld	r31, Z
 378:	e0 2d       	mov	r30, r0
 37a:	09 95       	icall
	uint8_t temp = rood; 
	_SFR_IO8(poort) &= temp; //Daarna wordt het rode licht aangezet
 37c:	d8 01       	movw	r26, r16
 37e:	12 96       	adiw	r26, 0x02	; 2
 380:	ec 91       	ld	r30, X
 382:	12 97       	sbiw	r26, 0x02	; 2
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 a1       	ldd	r24, Z+32	; 0x20
 388:	13 96       	adiw	r26, 0x03	; 3
 38a:	9c 91       	ld	r25, X
 38c:	89 23       	and	r24, r25
 38e:	80 a3       	std	Z+32, r24	; 0x20
}
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <_ZN15VoetgangerLicht14lichtNaarGroenEv>:

void VoetgangerLicht::lichtNaarGroen() {
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 39c:	dc 01       	movw	r26, r24
 39e:	ed 91       	ld	r30, X+
 3a0:	fc 91       	ld	r31, X
 3a2:	01 90       	ld	r0, Z+
 3a4:	f0 81       	ld	r31, Z
 3a6:	e0 2d       	mov	r30, r0
 3a8:	09 95       	icall
	uint8_t temp = groen;
	_SFR_IO8(poort) &= temp;  //Daarna wordt het groene licht aangezet
 3aa:	d8 01       	movw	r26, r16
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	ec 91       	ld	r30, X
 3b0:	12 97       	sbiw	r26, 0x02	; 2
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 a1       	ldd	r24, Z+32	; 0x20
 3b6:	14 96       	adiw	r26, 0x04	; 4
 3b8:	9c 91       	ld	r25, X
 3ba:	89 23       	and	r24, r25
 3bc:	80 a3       	std	Z+32, r24	; 0x20
}
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <_ZN15VoetgangerLicht14alleLichtenUitEv>:

void VoetgangerLicht::alleLichtenUit() {
 3c4:	fc 01       	movw	r30, r24
	uint8_t temp = ~(groen & rood); //Zorgt ervoor dat alleen de pinnetjes behorend bij groen en rood weer 1 worden
	_SFR_IO8(poort) |= temp;		//De rest van de pinnetjes van de poort wordt niet aangepast
 3c6:	a2 81       	ldd	r26, Z+2	; 0x02
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	90 96       	adiw	r26, 0x20	; 32
 3cc:	2c 91       	ld	r18, X
 3ce:	90 97       	sbiw	r26, 0x20	; 32
 3d0:	83 81       	ldd	r24, Z+3	; 0x03
 3d2:	94 81       	ldd	r25, Z+4	; 0x04
 3d4:	89 23       	and	r24, r25
 3d6:	80 95       	com	r24
 3d8:	28 2b       	or	r18, r24
 3da:	90 96       	adiw	r26, 0x20	; 32
 3dc:	2c 93       	st	X, r18
}
 3de:	08 95       	ret

000003e0 <_ZN15VoetgangerLichteqERS_>:

//Hier overloaden wij de 'is gelijk aan' operator om dezelfde lichten
// te detecteren
bool VoetgangerLicht::operator==(VoetgangerLicht &rhs){
 3e0:	fc 01       	movw	r30, r24
 3e2:	db 01       	movw	r26, r22
	if((*this).getRood() == rhs.getRood() &&
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	13 96       	adiw	r26, 0x03	; 3
 3e8:	8c 91       	ld	r24, X
 3ea:	13 97       	sbiw	r26, 0x03	; 3
 3ec:	98 17       	cp	r25, r24
 3ee:	71 f4       	brne	.+28     	; 0x40c <_ZN15VoetgangerLichteqERS_+0x2c>
 3f0:	94 81       	ldd	r25, Z+4	; 0x04
 3f2:	14 96       	adiw	r26, 0x04	; 4
 3f4:	8c 91       	ld	r24, X
 3f6:	14 97       	sbiw	r26, 0x04	; 4
 3f8:	98 17       	cp	r25, r24
 3fa:	41 f4       	brne	.+16     	; 0x40c <_ZN15VoetgangerLichteqERS_+0x2c>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	92 81       	ldd	r25, Z+2	; 0x02
 400:	12 96       	adiw	r26, 0x02	; 2
 402:	8c 91       	ld	r24, X
 404:	98 17       	cp	r25, r24
 406:	19 f4       	brne	.+6      	; 0x40e <_ZN15VoetgangerLichteqERS_+0x2e>
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	01 c0       	rjmp	.+2      	; 0x40e <_ZN15VoetgangerLichteqERS_+0x2e>
 40c:	20 e0       	ldi	r18, 0x00	; 0
	   (*this).getGroen() == rhs.getGroen() &&
	   (*this).getPoort() == rhs.getPoort())
		return true;
	return false;
}
 40e:	82 2f       	mov	r24, r18
 410:	08 95       	ret

00000412 <_ZNK15VoetgangerLicht7getRoodEv>:

uint8_t VoetgangerLicht::getRood() const {
	return rood;
}
 412:	fc 01       	movw	r30, r24
 414:	83 81       	ldd	r24, Z+3	; 0x03
 416:	08 95       	ret

00000418 <_ZNK15VoetgangerLicht8getGroenEv>:

uint8_t VoetgangerLicht::getGroen() const {
	return groen;
}
 418:	fc 01       	movw	r30, r24
 41a:	84 81       	ldd	r24, Z+4	; 0x04
 41c:	08 95       	ret

0000041e <_ZNK15VoetgangerLicht8getPoortEv>:

uint8_t VoetgangerLicht::getPoort() const {
	return poort;
}
 41e:	fc 01       	movw	r30, r24
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	08 95       	ret

00000424 <_ZN9AutoLicht15lichtNaarOranjeEv>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
}

void AutoLicht::lichtNaarOranje() {
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 42a:	dc 01       	movw	r26, r24
 42c:	ed 91       	ld	r30, X+
 42e:	fc 91       	ld	r31, X
 430:	01 90       	ld	r0, Z+
 432:	f0 81       	ld	r31, Z
 434:	e0 2d       	mov	r30, r0
 436:	09 95       	icall
	uint8_t temp = oranje; // Daarna wordt het oranje licht aangezet
	_SFR_IO8(poort) &= temp; 
 438:	d8 01       	movw	r26, r16
 43a:	12 96       	adiw	r26, 0x02	; 2
 43c:	ec 91       	ld	r30, X
 43e:	12 97       	sbiw	r26, 0x02	; 2
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 a1       	ldd	r24, Z+32	; 0x20
 444:	15 96       	adiw	r26, 0x05	; 5
 446:	9c 91       	ld	r25, X
 448:	89 23       	and	r24, r25
 44a:	80 a3       	std	Z+32, r24	; 0x20
}
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <_ZN9AutoLicht14alleLichtenUitEv>:

void AutoLicht::alleLichtenUit() {
 452:	fc 01       	movw	r30, r24
	uint8_t temp = ~(groen & oranje & rood); //Zorgt ervoor dat alleen de pinnetjes behorend bij groen, oranje en rood weer 1 worden
	_SFR_IO8(poort) |= temp;		//De rest van de pinnetjes van de poort wordt niet aangepast
 454:	a2 81       	ldd	r26, Z+2	; 0x02
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	90 96       	adiw	r26, 0x20	; 32
 45a:	2c 91       	ld	r18, X
 45c:	90 97       	sbiw	r26, 0x20	; 32
 45e:	85 81       	ldd	r24, Z+5	; 0x05
 460:	94 81       	ldd	r25, Z+4	; 0x04
 462:	89 23       	and	r24, r25
 464:	93 81       	ldd	r25, Z+3	; 0x03
 466:	89 23       	and	r24, r25
 468:	80 95       	com	r24
 46a:	82 2b       	or	r24, r18
 46c:	90 96       	adiw	r26, 0x20	; 32
 46e:	8c 93       	st	X, r24
}
 470:	08 95       	ret

00000472 <_ZN9AutoLichtC1Ehhhh>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	7c 01       	movw	r14, r24
 47c:	14 2f       	mov	r17, r20
 47e:	42 2f       	mov	r20, r18
 480:	20 2f       	mov	r18, r16
 482:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN15VoetgangerLichtC2Ehhh>
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	f7 01       	movw	r30, r14
 48c:	91 83       	std	Z+1, r25	; 0x01
 48e:	80 83       	st	Z, r24
 490:	15 83       	std	Z+5, r17	; 0x05
}
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	08 95       	ret

0000049c <_ZN9AutoLichtC2Ehhhh>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	7c 01       	movw	r14, r24
 4a6:	14 2f       	mov	r17, r20
 4a8:	42 2f       	mov	r20, r18
 4aa:	20 2f       	mov	r18, r16
 4ac:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN15VoetgangerLichtC2Ehhh>
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	f7 01       	movw	r30, r14
 4b6:	91 83       	std	Z+1, r25	; 0x01
 4b8:	80 83       	st	Z, r24
 4ba:	15 83       	std	Z+5, r17	; 0x05
}
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	08 95       	ret

000004c6 <_ZN8ScenarioC2EP4ListIP15VoetgangerLichtE>:
#include "list.h"
#include "voetgangerlicht.h"

Scenario::Scenario(List<VoetgangerLicht*>* l) {

}
 4c6:	08 95       	ret

000004c8 <_ZN8ScenarioC1EP4ListIP15VoetgangerLichtE>:
 4c8:	08 95       	ret

000004ca <malloc>:
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	bc 01       	movw	r22, r24
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	91 05       	cpc	r25, r1
 4d4:	10 f4       	brcc	.+4      	; 0x4da <malloc+0x10>
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	a0 91 14 01 	lds	r26, 0x0114
 4de:	b0 91 15 01 	lds	r27, 0x0115
 4e2:	ed 01       	movw	r28, r26
 4e4:	e0 e0       	ldi	r30, 0x00	; 0
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	21 c0       	rjmp	.+66     	; 0x530 <malloc+0x66>
 4ee:	88 81       	ld	r24, Y
 4f0:	99 81       	ldd	r25, Y+1	; 0x01
 4f2:	86 17       	cp	r24, r22
 4f4:	97 07       	cpc	r25, r23
 4f6:	69 f4       	brne	.+26     	; 0x512 <malloc+0x48>
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	9b 81       	ldd	r25, Y+3	; 0x03
 4fc:	30 97       	sbiw	r30, 0x00	; 0
 4fe:	19 f0       	breq	.+6      	; 0x506 <malloc+0x3c>
 500:	93 83       	std	Z+3, r25	; 0x03
 502:	82 83       	std	Z+2, r24	; 0x02
 504:	04 c0       	rjmp	.+8      	; 0x50e <malloc+0x44>
 506:	90 93 15 01 	sts	0x0115, r25
 50a:	80 93 14 01 	sts	0x0114, r24
 50e:	fe 01       	movw	r30, r28
 510:	34 c0       	rjmp	.+104    	; 0x57a <malloc+0xb0>
 512:	68 17       	cp	r22, r24
 514:	79 07       	cpc	r23, r25
 516:	38 f4       	brcc	.+14     	; 0x526 <malloc+0x5c>
 518:	41 15       	cp	r20, r1
 51a:	51 05       	cpc	r21, r1
 51c:	19 f0       	breq	.+6      	; 0x524 <malloc+0x5a>
 51e:	84 17       	cp	r24, r20
 520:	95 07       	cpc	r25, r21
 522:	08 f4       	brcc	.+2      	; 0x526 <malloc+0x5c>
 524:	ac 01       	movw	r20, r24
 526:	fe 01       	movw	r30, r28
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	9b 81       	ldd	r25, Y+3	; 0x03
 52c:	9c 01       	movw	r18, r24
 52e:	e9 01       	movw	r28, r18
 530:	20 97       	sbiw	r28, 0x00	; 0
 532:	e9 f6       	brne	.-70     	; 0x4ee <malloc+0x24>
 534:	41 15       	cp	r20, r1
 536:	51 05       	cpc	r21, r1
 538:	a9 f1       	breq	.+106    	; 0x5a4 <malloc+0xda>
 53a:	ca 01       	movw	r24, r20
 53c:	86 1b       	sub	r24, r22
 53e:	97 0b       	sbc	r25, r23
 540:	04 97       	sbiw	r24, 0x04	; 4
 542:	08 f4       	brcc	.+2      	; 0x546 <malloc+0x7c>
 544:	ba 01       	movw	r22, r20
 546:	e0 e0       	ldi	r30, 0x00	; 0
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	2a c0       	rjmp	.+84     	; 0x5a0 <malloc+0xd6>
 54c:	8d 91       	ld	r24, X+
 54e:	9c 91       	ld	r25, X
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	84 17       	cp	r24, r20
 554:	95 07       	cpc	r25, r21
 556:	f9 f4       	brne	.+62     	; 0x596 <malloc+0xcc>
 558:	64 17       	cp	r22, r20
 55a:	75 07       	cpc	r23, r21
 55c:	81 f4       	brne	.+32     	; 0x57e <malloc+0xb4>
 55e:	12 96       	adiw	r26, 0x02	; 2
 560:	8d 91       	ld	r24, X+
 562:	9c 91       	ld	r25, X
 564:	13 97       	sbiw	r26, 0x03	; 3
 566:	30 97       	sbiw	r30, 0x00	; 0
 568:	19 f0       	breq	.+6      	; 0x570 <malloc+0xa6>
 56a:	93 83       	std	Z+3, r25	; 0x03
 56c:	82 83       	std	Z+2, r24	; 0x02
 56e:	04 c0       	rjmp	.+8      	; 0x578 <malloc+0xae>
 570:	90 93 15 01 	sts	0x0115, r25
 574:	80 93 14 01 	sts	0x0114, r24
 578:	fd 01       	movw	r30, r26
 57a:	32 96       	adiw	r30, 0x02	; 2
 57c:	4f c0       	rjmp	.+158    	; 0x61c <malloc+0x152>
 57e:	ca 01       	movw	r24, r20
 580:	86 1b       	sub	r24, r22
 582:	97 0b       	sbc	r25, r23
 584:	fd 01       	movw	r30, r26
 586:	e8 0f       	add	r30, r24
 588:	f9 1f       	adc	r31, r25
 58a:	61 93       	st	Z+, r22
 58c:	71 93       	st	Z+, r23
 58e:	02 97       	sbiw	r24, 0x02	; 2
 590:	8d 93       	st	X+, r24
 592:	9c 93       	st	X, r25
 594:	43 c0       	rjmp	.+134    	; 0x61c <malloc+0x152>
 596:	fd 01       	movw	r30, r26
 598:	82 81       	ldd	r24, Z+2	; 0x02
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	9c 01       	movw	r18, r24
 59e:	d9 01       	movw	r26, r18
 5a0:	10 97       	sbiw	r26, 0x00	; 0
 5a2:	a1 f6       	brne	.-88     	; 0x54c <malloc+0x82>
 5a4:	80 91 12 01 	lds	r24, 0x0112
 5a8:	90 91 13 01 	lds	r25, 0x0113
 5ac:	89 2b       	or	r24, r25
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <malloc+0xf6>
 5b0:	80 91 0e 01 	lds	r24, 0x010E
 5b4:	90 91 0f 01 	lds	r25, 0x010F
 5b8:	90 93 13 01 	sts	0x0113, r25
 5bc:	80 93 12 01 	sts	0x0112, r24
 5c0:	40 91 10 01 	lds	r20, 0x0110
 5c4:	50 91 11 01 	lds	r21, 0x0111
 5c8:	41 15       	cp	r20, r1
 5ca:	51 05       	cpc	r21, r1
 5cc:	41 f4       	brne	.+16     	; 0x5de <malloc+0x114>
 5ce:	4d b7       	in	r20, 0x3d	; 61
 5d0:	5e b7       	in	r21, 0x3e	; 62
 5d2:	80 91 0c 01 	lds	r24, 0x010C
 5d6:	90 91 0d 01 	lds	r25, 0x010D
 5da:	48 1b       	sub	r20, r24
 5dc:	59 0b       	sbc	r21, r25
 5de:	20 91 12 01 	lds	r18, 0x0112
 5e2:	30 91 13 01 	lds	r19, 0x0113
 5e6:	24 17       	cp	r18, r20
 5e8:	35 07       	cpc	r19, r21
 5ea:	b0 f4       	brcc	.+44     	; 0x618 <malloc+0x14e>
 5ec:	ca 01       	movw	r24, r20
 5ee:	82 1b       	sub	r24, r18
 5f0:	93 0b       	sbc	r25, r19
 5f2:	86 17       	cp	r24, r22
 5f4:	97 07       	cpc	r25, r23
 5f6:	80 f0       	brcs	.+32     	; 0x618 <malloc+0x14e>
 5f8:	ab 01       	movw	r20, r22
 5fa:	4e 5f       	subi	r20, 0xFE	; 254
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255
 5fe:	84 17       	cp	r24, r20
 600:	95 07       	cpc	r25, r21
 602:	50 f0       	brcs	.+20     	; 0x618 <malloc+0x14e>
 604:	42 0f       	add	r20, r18
 606:	53 1f       	adc	r21, r19
 608:	50 93 13 01 	sts	0x0113, r21
 60c:	40 93 12 01 	sts	0x0112, r20
 610:	f9 01       	movw	r30, r18
 612:	61 93       	st	Z+, r22
 614:	71 93       	st	Z+, r23
 616:	02 c0       	rjmp	.+4      	; 0x61c <malloc+0x152>
 618:	e0 e0       	ldi	r30, 0x00	; 0
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	cf 01       	movw	r24, r30
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <free>:
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	09 f4       	brne	.+2      	; 0x62e <free+0xa>
 62c:	50 c0       	rjmp	.+160    	; 0x6ce <free+0xaa>
 62e:	ec 01       	movw	r28, r24
 630:	22 97       	sbiw	r28, 0x02	; 2
 632:	1b 82       	std	Y+3, r1	; 0x03
 634:	1a 82       	std	Y+2, r1	; 0x02
 636:	a0 91 14 01 	lds	r26, 0x0114
 63a:	b0 91 15 01 	lds	r27, 0x0115
 63e:	10 97       	sbiw	r26, 0x00	; 0
 640:	09 f1       	breq	.+66     	; 0x684 <free+0x60>
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	ac 17       	cp	r26, r28
 648:	bd 07       	cpc	r27, r29
 64a:	08 f1       	brcs	.+66     	; 0x68e <free+0x6a>
 64c:	bb 83       	std	Y+3, r27	; 0x03
 64e:	aa 83       	std	Y+2, r26	; 0x02
 650:	fe 01       	movw	r30, r28
 652:	21 91       	ld	r18, Z+
 654:	31 91       	ld	r19, Z+
 656:	e2 0f       	add	r30, r18
 658:	f3 1f       	adc	r31, r19
 65a:	ae 17       	cp	r26, r30
 65c:	bf 07       	cpc	r27, r31
 65e:	79 f4       	brne	.+30     	; 0x67e <free+0x5a>
 660:	8d 91       	ld	r24, X+
 662:	9c 91       	ld	r25, X
 664:	11 97       	sbiw	r26, 0x01	; 1
 666:	28 0f       	add	r18, r24
 668:	39 1f       	adc	r19, r25
 66a:	2e 5f       	subi	r18, 0xFE	; 254
 66c:	3f 4f       	sbci	r19, 0xFF	; 255
 66e:	39 83       	std	Y+1, r19	; 0x01
 670:	28 83       	st	Y, r18
 672:	12 96       	adiw	r26, 0x02	; 2
 674:	8d 91       	ld	r24, X+
 676:	9c 91       	ld	r25, X
 678:	13 97       	sbiw	r26, 0x03	; 3
 67a:	9b 83       	std	Y+3, r25	; 0x03
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	41 15       	cp	r20, r1
 680:	51 05       	cpc	r21, r1
 682:	71 f4       	brne	.+28     	; 0x6a0 <free+0x7c>
 684:	d0 93 15 01 	sts	0x0115, r29
 688:	c0 93 14 01 	sts	0x0114, r28
 68c:	20 c0       	rjmp	.+64     	; 0x6ce <free+0xaa>
 68e:	12 96       	adiw	r26, 0x02	; 2
 690:	8d 91       	ld	r24, X+
 692:	9c 91       	ld	r25, X
 694:	13 97       	sbiw	r26, 0x03	; 3
 696:	ad 01       	movw	r20, r26
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	11 f0       	breq	.+4      	; 0x6a0 <free+0x7c>
 69c:	dc 01       	movw	r26, r24
 69e:	d3 cf       	rjmp	.-90     	; 0x646 <free+0x22>
 6a0:	fa 01       	movw	r30, r20
 6a2:	d3 83       	std	Z+3, r29	; 0x03
 6a4:	c2 83       	std	Z+2, r28	; 0x02
 6a6:	21 91       	ld	r18, Z+
 6a8:	31 91       	ld	r19, Z+
 6aa:	e2 0f       	add	r30, r18
 6ac:	f3 1f       	adc	r31, r19
 6ae:	ce 17       	cp	r28, r30
 6b0:	df 07       	cpc	r29, r31
 6b2:	69 f4       	brne	.+26     	; 0x6ce <free+0xaa>
 6b4:	88 81       	ld	r24, Y
 6b6:	99 81       	ldd	r25, Y+1	; 0x01
 6b8:	28 0f       	add	r18, r24
 6ba:	39 1f       	adc	r19, r25
 6bc:	2e 5f       	subi	r18, 0xFE	; 254
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	fa 01       	movw	r30, r20
 6c2:	31 83       	std	Z+1, r19	; 0x01
 6c4:	20 83       	st	Z, r18
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ca:	93 83       	std	Z+3, r25	; 0x03
 6cc:	82 83       	std	Z+2, r24	; 0x02
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
