
Verkeersplein.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002b4  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000163  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000073d  00000000  00000000  000004f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000410  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036c  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000321  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022c  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#define ADRESPORTA 0x1B
#define ADRESPORTB 0x18
#define ADRESPORTC 0x15
#define ADRESPORTD 0x12

int main()
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	a7 97       	sbiw	r28, 0x27	; 39
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
{
	//Stel onderstaande poorten in op Output en laad allemaal enen in
	DDRA=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
  dc:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
  de:	84 bb       	out	0x14, r24	; 20
	PORTA=0xFF;
  e0:	8b bb       	out	0x1b, r24	; 27
	PORTB=0xFF;
  e2:	88 bb       	out	0x18, r24	; 24
	PORTC=0xFF;
  e4:	85 bb       	out	0x15, r24	; 21

	// Aanmaken van de verschillende autolichtobjecten
	AutoLicht azl(0xFE, 0xFD, 0xFB, ADRESPORTB);
  e6:	ce 01       	movw	r24, r28
  e8:	40 96       	adiw	r24, 0x10	; 16
  ea:	6e ef       	ldi	r22, 0xFE	; 254
  ec:	4d ef       	ldi	r20, 0xFD	; 253
  ee:	2b ef       	ldi	r18, 0xFB	; 251
  f0:	08 e1       	ldi	r16, 0x18	; 24
  f2:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN9AutoLichtC1Ehhhh>
	AutoLicht azr(0xF7, 0xEF, 0xDF, ADRESPORTB);
  f6:	ce 01       	movw	r24, r28
  f8:	46 96       	adiw	r24, 0x16	; 22
  fa:	67 ef       	ldi	r22, 0xF7	; 247
  fc:	4f ee       	ldi	r20, 0xEF	; 239
  fe:	2f ed       	ldi	r18, 0xDF	; 223
 100:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN9AutoLichtC1Ehhhh>
	AutoLicht ahl(0xFE, 0xFD, 0xFB, ADRESPORTC);
 104:	8c e1       	ldi	r24, 0x1C	; 28
 106:	e8 2e       	mov	r14, r24
 108:	f1 2c       	mov	r15, r1
 10a:	ec 0e       	add	r14, r28
 10c:	fd 1e       	adc	r15, r29
 10e:	c7 01       	movw	r24, r14
 110:	6e ef       	ldi	r22, 0xFE	; 254
 112:	4d ef       	ldi	r20, 0xFD	; 253
 114:	2b ef       	ldi	r18, 0xFB	; 251
 116:	05 e1       	ldi	r16, 0x15	; 21
 118:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN9AutoLichtC1Ehhhh>
	AutoLicht ahr(0xF7, 0xEF, 0xDF, ADRESPORTC);
 11c:	ce 01       	movw	r24, r28
 11e:	82 96       	adiw	r24, 0x22	; 34
 120:	67 ef       	ldi	r22, 0xF7	; 247
 122:	4f ee       	ldi	r20, 0xEF	; 239
 124:	2f ed       	ldi	r18, 0xDF	; 223
 126:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN9AutoLichtC1Ehhhh>

	// Aanmaken van de verschillende voetgangerlichtobjecten
	VoetgangerLicht vhr(0xFE, 0xFD, ADRESPORTA);
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	6e ef       	ldi	r22, 0xFE	; 254
 130:	4d ef       	ldi	r20, 0xFD	; 253
 132:	2b e1       	ldi	r18, 0x1B	; 27
 134:	0e 94 c2 00 	call	0x184	; 0x184 <_ZN15VoetgangerLichtC1Ehhh>
	VoetgangerLicht vz(0xBF, 0x7F, ADRESPORTB);
 138:	ce 01       	movw	r24, r28
 13a:	06 96       	adiw	r24, 0x06	; 6
 13c:	6f eb       	ldi	r22, 0xBF	; 191
 13e:	4f e7       	ldi	r20, 0x7F	; 127
 140:	28 e1       	ldi	r18, 0x18	; 24
 142:	0e 94 c2 00 	call	0x184	; 0x184 <_ZN15VoetgangerLichtC1Ehhh>
	VoetgangerLicht vhl(0xBF, 0x7F, ADRESPORTC);
 146:	ce 01       	movw	r24, r28
 148:	0b 96       	adiw	r24, 0x0b	; 11
 14a:	6f eb       	ldi	r22, 0xBF	; 191
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	25 e1       	ldi	r18, 0x15	; 21
 150:	0e 94 c2 00 	call	0x184	; 0x184 <_ZN15VoetgangerLichtC1Ehhh>

	//test
	ahl.lichtNaarGroen(); 
 154:	c7 01       	movw	r24, r14
 156:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN15VoetgangerLicht14lichtNaarGroenEv>
	ahl.lichtNaarRood();
 15a:	c7 01       	movw	r24, r14
 15c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN15VoetgangerLicht13lichtNaarRoodEv>
	ahl.lichtNaarOranje();
 160:	c7 01       	movw	r24, r14
 162:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN9AutoLicht15lichtNaarOranjeEv>
	ahl.alleLichtenUit();
 166:	c7 01       	movw	r24, r14
 168:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN9AutoLicht14alleLichtenUitEv>

	List<int> a;

	while(1) {
		PINE = PINE;
 16c:	81 b1       	in	r24, 0x01	; 1
 16e:	81 b9       	out	0x01, r24	; 1
 170:	fd cf       	rjmp	.-6      	; 0x16c <main+0xae>

00000172 <_ZN15VoetgangerLichtC2Ehhh>:
#include "voetgangerlicht.h"

VoetgangerLicht::VoetgangerLicht(uint8_t rood, uint8_t groen, uint8_t poort):rood(rood), groen(groen), poort(poort) {	
 172:	fc 01       	movw	r30, r24
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	91 83       	std	Z+1, r25	; 0x01
 17a:	80 83       	st	Z, r24
 17c:	22 83       	std	Z+2, r18	; 0x02
 17e:	63 83       	std	Z+3, r22	; 0x03
 180:	44 83       	std	Z+4, r20	; 0x04
}
 182:	08 95       	ret

00000184 <_ZN15VoetgangerLichtC1Ehhh>:
#include "voetgangerlicht.h"

VoetgangerLicht::VoetgangerLicht(uint8_t rood, uint8_t groen, uint8_t poort):rood(rood), groen(groen), poort(poort) {	
 184:	fc 01       	movw	r30, r24
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
 18e:	22 83       	std	Z+2, r18	; 0x02
 190:	63 83       	std	Z+3, r22	; 0x03
 192:	44 83       	std	Z+4, r20	; 0x04
}
 194:	08 95       	ret

00000196 <_ZN15VoetgangerLicht13lichtNaarRoodEv>:

void VoetgangerLicht::lichtNaarRood() {
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 19c:	dc 01       	movw	r26, r24
 19e:	ed 91       	ld	r30, X+
 1a0:	fc 91       	ld	r31, X
 1a2:	01 90       	ld	r0, Z+
 1a4:	f0 81       	ld	r31, Z
 1a6:	e0 2d       	mov	r30, r0
 1a8:	09 95       	icall
	uint8_t temp = rood; 
	_SFR_IO8(poort) &= temp; //Daarna wordt het rode licht aangezet
 1aa:	d8 01       	movw	r26, r16
 1ac:	12 96       	adiw	r26, 0x02	; 2
 1ae:	ec 91       	ld	r30, X
 1b0:	12 97       	sbiw	r26, 0x02	; 2
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 a1       	ldd	r24, Z+32	; 0x20
 1b6:	13 96       	adiw	r26, 0x03	; 3
 1b8:	9c 91       	ld	r25, X
 1ba:	89 23       	and	r24, r25
 1bc:	80 a3       	std	Z+32, r24	; 0x20
}
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <_ZN15VoetgangerLicht14lichtNaarGroenEv>:

void VoetgangerLicht::lichtNaarGroen() {
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 1ca:	dc 01       	movw	r26, r24
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	01 90       	ld	r0, Z+
 1d2:	f0 81       	ld	r31, Z
 1d4:	e0 2d       	mov	r30, r0
 1d6:	09 95       	icall
	uint8_t temp = groen;
	_SFR_IO8(poort) &= temp;  //Daarna wordt het groene licht aangezet
 1d8:	d8 01       	movw	r26, r16
 1da:	12 96       	adiw	r26, 0x02	; 2
 1dc:	ec 91       	ld	r30, X
 1de:	12 97       	sbiw	r26, 0x02	; 2
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 a1       	ldd	r24, Z+32	; 0x20
 1e4:	14 96       	adiw	r26, 0x04	; 4
 1e6:	9c 91       	ld	r25, X
 1e8:	89 23       	and	r24, r25
 1ea:	80 a3       	std	Z+32, r24	; 0x20
}
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <_ZN15VoetgangerLicht14alleLichtenUitEv>:

void VoetgangerLicht::alleLichtenUit() {
 1f2:	fc 01       	movw	r30, r24
	uint8_t temp = ~(groen & rood); //Zorgt ervoor dat alleen de pinnetjes behorend bij groen en rood weer 1 worden
	_SFR_IO8(poort) |= temp;		//De rest van de pinnetjes van de poort wordt niet aangepast
 1f4:	a2 81       	ldd	r26, Z+2	; 0x02
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	90 96       	adiw	r26, 0x20	; 32
 1fa:	2c 91       	ld	r18, X
 1fc:	90 97       	sbiw	r26, 0x20	; 32
 1fe:	83 81       	ldd	r24, Z+3	; 0x03
 200:	94 81       	ldd	r25, Z+4	; 0x04
 202:	89 23       	and	r24, r25
 204:	80 95       	com	r24
 206:	28 2b       	or	r18, r24
 208:	90 96       	adiw	r26, 0x20	; 32
 20a:	2c 93       	st	X, r18
}
 20c:	08 95       	ret

0000020e <_ZN9AutoLicht15lichtNaarOranjeEv>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
}

void AutoLicht::lichtNaarOranje() {
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	8c 01       	movw	r16, r24
	alleLichtenUit(); // Eerst worden de lichten die nu aanstaan uitgezet
 214:	dc 01       	movw	r26, r24
 216:	ed 91       	ld	r30, X+
 218:	fc 91       	ld	r31, X
 21a:	01 90       	ld	r0, Z+
 21c:	f0 81       	ld	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	09 95       	icall
	uint8_t temp = oranje; // Daarna wordt het oranje licht aangezet
	_SFR_IO8(poort) &= temp; 
 222:	d8 01       	movw	r26, r16
 224:	12 96       	adiw	r26, 0x02	; 2
 226:	ec 91       	ld	r30, X
 228:	12 97       	sbiw	r26, 0x02	; 2
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 a1       	ldd	r24, Z+32	; 0x20
 22e:	15 96       	adiw	r26, 0x05	; 5
 230:	9c 91       	ld	r25, X
 232:	89 23       	and	r24, r25
 234:	80 a3       	std	Z+32, r24	; 0x20
}
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <_ZN9AutoLicht14alleLichtenUitEv>:

void AutoLicht::alleLichtenUit() {
 23c:	fc 01       	movw	r30, r24
	uint8_t temp = ~(groen & oranje & rood); //Zorgt ervoor dat alleen de pinnetjes behorend bij groen, oranje en rood weer 1 worden
	_SFR_IO8(poort) |= temp;		//De rest van de pinnetjes van de poort wordt niet aangepast
 23e:	a2 81       	ldd	r26, Z+2	; 0x02
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	90 96       	adiw	r26, 0x20	; 32
 244:	2c 91       	ld	r18, X
 246:	90 97       	sbiw	r26, 0x20	; 32
 248:	85 81       	ldd	r24, Z+5	; 0x05
 24a:	94 81       	ldd	r25, Z+4	; 0x04
 24c:	89 23       	and	r24, r25
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	89 23       	and	r24, r25
 252:	80 95       	com	r24
 254:	82 2b       	or	r24, r18
 256:	90 96       	adiw	r26, 0x20	; 32
 258:	8c 93       	st	X, r24
}
 25a:	08 95       	ret

0000025c <_ZN9AutoLichtC1Ehhhh>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	7c 01       	movw	r14, r24
 266:	14 2f       	mov	r17, r20
 268:	42 2f       	mov	r20, r18
 26a:	20 2f       	mov	r18, r16
 26c:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN15VoetgangerLichtC2Ehhh>
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	f7 01       	movw	r30, r14
 276:	91 83       	std	Z+1, r25	; 0x01
 278:	80 83       	st	Z, r24
 27a:	15 83       	std	Z+5, r17	; 0x05
}
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	08 95       	ret

00000286 <_ZN9AutoLichtC2Ehhhh>:
#include "autolicht.h"

AutoLicht::AutoLicht(uint8_t rood, uint8_t oranje, uint8_t groen, uint8_t poort):VoetgangerLicht(rood, groen, poort), oranje(oranje) {
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	7c 01       	movw	r14, r24
 290:	14 2f       	mov	r17, r20
 292:	42 2f       	mov	r20, r18
 294:	20 2f       	mov	r18, r16
 296:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN15VoetgangerLichtC2Ehhh>
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	f7 01       	movw	r30, r14
 2a0:	91 83       	std	Z+1, r25	; 0x01
 2a2:	80 83       	st	Z, r24
 2a4:	15 83       	std	Z+5, r17	; 0x05
}
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
